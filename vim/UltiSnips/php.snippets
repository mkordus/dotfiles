priority 0

global !p
def getArgs(group):
	import re
	word = re.compile('\$\w+')
	return [i[1:] for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet vo "Value Object with namespace snippet" b
namespace `!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

class `!p snip.rv = re.match(r'.*(?=\.)', fn).group() `
{
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\
	/** @var mixed $" + i + " */\n\
	private $" + i + ";\n\n"
if len(args) > 0:
	snip.rv += "    /**"
for i in args:
	snip.rv += "\n     * @param mixed $" + i
if len(args) > 0:
	snip.rv += "\n\
	 */\n"
snip.rv += "    public function __construct("
`${1:${VISUAL}}`!p
if "\n" in t[1]:
	snip.rv += ") {"
else:
	snip.rv += ")\n    {"
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\
	    $this->" + i + " = $" + i + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\n\
	/** @return mixed */\n\
	public function get" + camel(i) + "()\n\
	{\n\
	    return $this->" + i + ";\n\
	}"`
}

endsnippet

snippet gs "PHP Class Getter Setter" b
/** @param $1 $2 */
public function set${2/\w+\s*/\u$0/}($$2)
{
	$this->$2 = $$2;

	return $this;
}

/** @return $1 */
public function get${2/\w+\s*/\u$0/}()
{
	return $this->$2;
}
$0
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet log "log"
error_log(var_export($${1}, true));
${0}
endsnippet

snippet interface "interface declaration template" b
/**
 * Interface ${1:`!p snip.rv=snip.fn.split('.')[0]`}
 */
interface $1
{
	public function ${3:__construct}(${4:$options})
	{
		${5:// code}
	}
}
$0
endsnippet

snippet ve "Dumb debug helper in HTML"
    echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet inh "@inheritdoc docblock"
/** {@inheritdoc} */
endsnippet

# :vim:ft=snippets:
