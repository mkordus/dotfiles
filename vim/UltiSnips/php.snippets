priority 0

global !p
def getArgs(group):
	word = re.compile('\w*\s?\$\w+')
	matches = []
	for i in word.findall(group):
		parts = i.split(' ')
		if len(parts) == 1:
			matches += [['mixed', parts[0][1:]]]
		else:
			if not parts[0]:
				parts[0] = 'mixed'
			matches += [[parts[0], parts[1][1:]]]

	return matches

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

def getNamespace(path):
	cwd = vim.eval("getcwd()")
	relPath = os.path.relpath(path, cwd)

	m = re.search(r'[A-Z].+(?=/)', relPath)
	if m:
		return m.group().replace('/', '\\')
	return ''

def genStructureWithNamespace(structureType, path, fileName):
	output = "<?php\n\n"
	output += "namespace " + getNamespace(path) + ";\n\n"
	output += structureType + " " + re.match(r'.*(?=\.)', fn).group() + "\n"
	output += "{\n"

	return output

def genStructureName():
	return re.match(r'.*(?=\.)', fn).group()

def genClassParams(args):
	output = ""
	for i in args:
		output += "    /** @var " + i[0] + " $" + i[1] + " */\n"
		output += "    private $" + i[1] + ";\n\n"

	return output

def changeParamsToLines(params):
	return "\n        " + re.sub(',\s+', ",\n        ", params)

def genDocParam(paramType, paramName):
	return "\n     * @param " + paramType + " $" + paramName 

def genConstructorDoc(args):
	output = ""
	if len(args) > 0:
		output += "    /**"
	for i in args:
		output += genDocParam(i[0], i[1])
	if len(args) > 0:
		output += "\n     */\n"

	return output

def genGetter(paramType, paramName):
	output = ""
	output += "    /** @return " + paramType + " */\n"
	output += "    public function get" + camel(paramName) + "()\n"
	output += "        return $this->" + paramName + ";\n"
	output += "    }"

	return output

endglobal

snippet na "Namespace" b
namespace `!p snip.rv += getNamespace(path) `;
endsnippet

snippet vo "Value Object" b
class `!p snip.rv = genStructureName() `
{
`!p
if len(t[1]) == 40:
	t[1] = changeParamsToLines(t[1])

args = getArgs(t[1])

snip.rv += genClassParams(args)
snip.rv += genConstructorDoc(args)

`    public function __construct(${1:${VISUAL}}`!p

if "\n" in t[1]:
	snip.rv = "\n    ) {"
else:
	snip.rv = ")\n    {"

for i in args:
	snip.rv += "\n        $this->" + i[1] + " = $" + i[1] + ";"

snip.rv += "\n    }"

for i in args:
	snip.rv += "\n\n" + genGetter(i[0], i[1])
`
}

endsnippet

snippet con "__construct with private properties" b
`!p
if len(t[1]) == 40:
	t[1] = changeParamsToLines(t[1])

args = getArgs(t[1])

snip.rv += genClassParams(args)
snip.rv += genConstructorDoc(args)

`    public function __construct(${1:${VISUAL}}`!p

if "\n" in t[1]:
	snip.rv = "\n    ) {"
else:
	snip.rv = ")\n    {"

for i in args:
	snip.rv += "\n        $this->" + i[1] + " = $" + i[1] + ";"

snip.rv += "\n    }"
`
endsnippet

snippet cl "class" b
class `!p snip.rv = genStructureName() `${1}
{
`!p 
if len(t[6]) == 40:
	t[6] = changeParamsToLines(t[6])

args = getArgs(t[6])

snip.rv += genClassParams(args)
snip.rv += genConstructorDoc(args)

`    public function __construct(${6:${VISUAL}}`!p

if "\n" in t[6]:
	snip.rv = "\n    ) {"
else:
	snip.rv = ")\n    {"

for i in args:
	snip.rv += "\n        $this->" + i[1] + " = $" + i[1] + ";"

snip.rv += "\n    }"
`$0
}

endsnippet

snippet test "phpunit test class" b
<?php

namespace `!p snip.rv = getNamespace(path)`;

class `!p snip.rv = re.match(r'.*(?=\.)', fn).group() ` extends \PHPUnit_Framework_TestCase
{${1:
    protected function tearDown()
    {
        \Mockery::close();
    }
}
	public function test${2:HappyPath}()
	{
		${3}
	}
}

endsnippet

snippet in "interface with namespace" b
interface `!p snip.rv = genStructureName() `
{
	$0
}

endsnippet

snippet fun "class function with docblock" b
/** `!p  
for i in getArgs(t[3]):
	snip.rv += genDocParam(i[0], i[1])
`
 * @return ${4:null}${5:
 * @throws ${6:\Exception}}
 */
${1:public} function ${2:name}(${3})
{
	${7}
}$0
endsnippet

snippet funi "class function with inheritdoc " b
/** @inheritdoc */
${1:public} function ${2:name}(${3})
{
	${7}
}$0
endsnippet

snippet ifun "interface function with docblock" b
/** `!p  
for i in getArgs(t[2]):
	snip.rv += genDocParam(i[0], i[1])
`
 * @return ${3:null}${4:
 * @throws ${5:\Exception}}
 */
public function ${1:name}(${2});
endsnippet

snippet va "@var docblock" b
/** 
 * @var ${1}
 */
endsnippet

snippet gs "PHP Class Getter Setter" b
/** @param $1 $2 */
public function set${2/\w+\s*/\u$0/}($$2)
{
	$this->$2 = $$2;

	return $this;
}

/** @return $1 */
public function get${2/\w+\s*/\u$0/}()
{
	return $this->$2;
}
$0
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet for "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${4:// code...}
}
endsnippet

snippet inh "@inheritdoc docblock"
/** {@inheritdoc} */
endsnippet

snippet pre "pre print_r"

echo '<pre>';
print_r($$1);
echo '</pre>';

endsnippet

snippet pred "pre print_r"

echo '<pre>';
print_r($$1);
echo '</pre>'; die;

endsnippet
# :vim:ft=snippets:
