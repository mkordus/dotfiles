" vi: fdm=marker
" Plug: {{{
set nocompatible
filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')

Plug 'godlygeek/tabular'
Plug 'yegappan/mru'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-vinegar'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'szw/vim-ctrlspace'

Plug 'tomtom/tcomment_vim'

Plug 'vim-scripts/dbext.vim', { 'for': ['php', 'sql']}
Plug 'scrooloose/syntastic', { 'for': ['php', 'javascript', 'python']}
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'
Plug 'joonty/vdebug', {'for': ['php']}
Plug 'mattn/webapi-vim'
Plug 'vim-scripts/YankRing.vim'

Plug 'christoomey/vim-tmux-navigator'
Plug 'Lokaltog/vim-easymotion'

Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
Plug 'jimsei/winresizer'
" colorschemes {{{
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
" }}}
" git {{{
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
" }}}
" languages {{{
Plug 'othree/html5.vim'
Plug 'tpope/vim-markdown'
Plug 'StanAngeloff/php.vim', { 'for': ['php']}
Plug 'vim-scripts/phpfolding.vim', { 'for': ['php']}
Plug 'beyondwords/vim-twig'
Plug 'leshill/vim-json'
Plug 'andersoncustodio/vim-tmux'
Plug 'groenewege/vim-less'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'octol/vim-cpp-enhanced-highlight'
" }}}
" other {{{
Plug 'vim-scripts/listmaps.vim'
" }}}
call plug#end()

filetype plugin indent on
" }}}
" PlugLazyLoading {{{
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'YouCompleteMe')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END
" }}}
" VimSettings: {{{
set encoding=utf-8
set undolevels=1000
set noshowmatch
set showmode
set noshowcmd

let g:mapleader = "\<Space>"
inoremap jk <Esc>
inoremap kj <Esc>
nmap <leader>ev :edit $MYVIMRC<CR>
nmap <leader>ws :w !sudo tee %<CR>

set number
set cpoptions+=n
nnoremap <Leader>l :set nonumber!<CR>
set ttyfast

map j gj
map k gk

set splitbelow
set splitright

"command line mode
set wildmenu
set wildmode=longest:list,full
set wildignorecase
set wildignore+=*/.git/*,*/tmp/*,*/cache/*

let loaded_matchparen = 0

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

set noruler

nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s

"speed up scrolling
set scrolljump=8

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

" use system clipboard instead of default vim
set clipboard=unnamedplus

set laststatus=2

" sql
let g:php_sql_query=0

"select php heredoc
vnoremap ih <ESC>?<<<<CR>jV/SQL;<CR>k

set mouse=a

set nolist
set foldmethod=manual
set completeopt=longest,menuone
"hard mode :)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
nnoremap <C-w>, 8<C-w><
nnoremap <C-w>. 8<C-w>>

set wildignorecase

let php_minlines=1000
" }}}
" Gvim {{{
set gcr=a:block
set gcr+=a:blinkon0

set guioptions-=T
set guioptions-=r
set guioptions-=L
set guioptions-=m
set guioptions-=e
set showtabline=1
set guifont=Liberation\ Mono\ for\ Powerline\ 11
set mousehide
" }}}
" Colorscheme {{{
syntax enable
" let g:zenburn_high_Contrast=1
colorscheme zenburn
" }}}
" JavascriptLibrariesSyntax {{{
let g:used_javascript_libs = 'jquery,angularjs,jasmine'
" }}}
" CtrlSpace {{{
if executable("ag")
    let g:ctrlspace_glob_command = 'ag -l --nocolor --hidden -g ""'
endif
let g:ctrlspace_save_workspace_on_exit = 1
let g:ctrlspace_max_search_results = -1
let g:ctrlspace_height = 12
let g:ctrlspace_max_height = 12
let g:ctrlspace_search_resonators = ['.', '/']
" }}}
" Vdebug {{{
let g:vdebug_keymap = {
    \    "run" : "<F5>",
    \    "step_over" : "<F6>",
    \    "step_into" : "<F7>",
    \    "step_out" : "<F8>",
    \    "get_context" : "<F9>",
    \    "set_breakpoint" : "<F10>",
    \    "detach" : "<F11>",
    \    "close" : "<F12>",
    \    "eval_under_cursor" : "<Leader>euc",
    \    "run_to_cursor" : "<Leader>c",
    \    "eval_visual" : "<Leader>e",
    \}
let g:vdebug_options= {
    \    "port" : 9000,
    \    "server" : 'localhost',
    \    "timeout" : 60,
    \    "on_close" : 'detach',
    \    "break_on_open" : 0,
    \    "ide_key" : '',
    \    "path_maps" : {},
    \    "debug_window_level" : 0,
    \    "debug_file_level" : 0,
    \    "debug_file" : "",
    \    "watch_window_style" : 'compact',
    \    "marker_default" : '⬦',
    \    "marker_closed_tree" : '▸',
    \    "marker_open_tree" : '▾',
    \    "continuous_mode" : 1
    \}
let g:vdebug_features = {
    \    'max_depth' : 2048,
    \    'max_children' : 128,
    \    'max_data' : 20000
    \}
" }}}
" Tagbar {{{
nnoremap <leader>t :TagbarOpenAutoClose<CR>
let g:tagbar_width = 45
" }}}
" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<C-b>"
let g:UltiSnipsEditSplit = "vertical"
" }}}
" Fugitive {{{
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gvdiff<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
" }}}
" Syntastic {{{
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0
" }}}
" PhpFolding.vim {{{
let g:DisableAutoPHPFolding = 1
nnoremap zp :EnableFastPHPFolds<Cr>
" }}}
" Easy-motion {{{
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" }}}
" Ranger {{{
function! RangeChooser()
    let temp = tempname()
    exec 'silent !ranger --choosefiles=' . shellescape(temp)
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar RangerChooser call RangeChooser()
nnoremap <leader>r :<C-U>RangerChooser<CR>
" }}}
" YouCompleteMe {{{
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_filetype_specific_completion_to_disable = {'php': 1}
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_use_ultisnips_completer = 1
" }}}
" FZF: {{{
nnoremap <C-T> :FZF!<CR>
" }}}
" AutoCMD-fileSpecific: {{{
augroup filespecific
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType sql,php,vim autocmd BufWritePre <buffer> :%s/\s\+$//e
    autocmd FileType javascript setlocal omnifunc=syntaxcomplete#Complete
augroup END
" }}}
" LocalConfig {{{
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif
" }}}
