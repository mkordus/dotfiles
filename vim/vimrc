" vi: fdm=marker
" Plug: {{{
if !has('nvim')
    set nocompatible
endif

filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')

" dispatch: {{{
Plug 'tpope/vim-dispatch'
Plug 'radenling/vim-dispatch-neovim'
" }}}
" Plug 'prestidigitator92/vim-phpunitqf'
Plug 'jlanzarotta/bufexplorer'
Plug 'terryma/vim-expand-region'
Plug 'triglav/vim-visual-increment'

Plug 'prestidigitator92/mru'
Plug 'tpope/vim-abolish'
Plug 'godlygeek/tabular'
Plug 'mileszs/ack.vim'
Plug 'prestidigitator92/vim-filebeagle'
Plug 'jimsei/winresizer'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-tbone'
Plug 'tpope/vim-projectionist'

Plug 'michaeljsmith/vim-indent-object'

" Plug 'christoomey/vim-tmux-navigator'

Plug 'prestidigitator92/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'

Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'
Plug 'junegunn/vim-fnr'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-flagship'

Plug 'vim-scripts/dbext.vim', { 'for': ['sql']}
Plug 'scrooloose/syntastic'
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'

Plug 'airblade/vim-gitgutter'

" Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
" Plug 'junegunn/rainbow_parentheses.vim'

Plug 'justinmk/vim-sneak'

" Plug 'vim-scripts/listmaps.vim'
" Colorschemes: {{{
Plug 'jonathanfilip/vim-lucius'
Plug 'prestidigitator92/vim-wombat256i'
Plug 'vim-scripts/wombat256.vim'
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/seoul256.vim'
Plug 'tomasr/molokai'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'prestidigitator92/vim-hybrid'
" }}}
" Syntax: {{{
Plug 'leafgarland/typescript-vim'
Plug 'tpope/vim-git'
" Plug 'othree/html5.vim', {'for': ['html']}
Plug 'tpope/vim-markdown'
" Plug 'StanAngeloff/php.vim', { 'for': ['php']}
" Plug 'vim-scripts/phpfolding.vim', { 'for': ['php']}
Plug 'beyondwords/vim-twig'
Plug 'leshill/vim-json', {'for': ['json', 'javascript']}
Plug 'groenewege/vim-less', { 'for': ['less'] }
" Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript'] }
Plug 'othree/yajs.vim'
" Plug 'dart-lang/dart-vim-plugin'
Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['cpp', 'hpp']}
" Plug 'fatih/vim-go'
Plug 'keith/tmux.vim'
" }}}
call plug#end()

filetype plugin indent on
" PlugLazyLoading: {{{
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'YouCompleteMe')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END
" }}}
" }}}

" Colorscheme: {{{
if !has('nvim')
    set t_Co=256
endif
syntax enable
set bg=light
colorscheme lucius
" }}}

" VimSettings: {{{

set noruler

if !has('nvim')
    set encoding=utf-8
endif
set undolevels=1000
set showmode
set noshowcmd

" set cpoptions+=n
set number
set numberwidth=4

set splitbelow
set splitright

"command line mode
set wildmenu
set wildmode=longest,list
set wildcharm=<tab>
set wildignorecase
set wildignore+=*/tmp/*,*/cache/*

nnoremap <leader>e :b<space><tab>

"matchparen
let loaded_matchparen = 1
set noshowmatch

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw
if !has('nvim')
    set ttyfast
endif

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

"speed up scrolling
set scrolloff=5
set sidescrolloff=5

" use system clipboard instead of default vim
set clipboard=unnamedplus

set laststatus=2

let g:php_sql_query=0

set mouse=a

set nolist
set foldmethod=manual
set completeopt=longest,menuone

set wildignorecase

let php_minlines=1000

set virtualedit=block

set hidden
set shortmess=aIT

set foldcolumn=0

set updatetime=500
let &showbreak = 'â†³ '
set nostartofline

set nocursorline
set nocursorcolumn

set showtabline=0
" }}}

" LocalConfig: {{{
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif
" }}}

" JavascriptLibrariesSyntax: {{{
let g:used_javascript_libs = 'jquery,angularjs,jasmine'
" }}}

" Tagbar: {{{
" 45
let g:tagbar_width = 85
let g:tagbar_compact = 1
let g:tagbar_sort = 0
" }}}

" UltiSnips: {{{
let g:UltiSnipsExpandTrigger = "<nop>"
let g:UltiSnipsJumpForwardTrigger="<cr>"
let g:UltiSnipsJumpBackwardTrigger = "<nop>"
let g:UltiSnipsEditSplit = "vertical"
" }}}

" Syntastic: {{{
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=0
let g:syntastic_always_populate_loc_list=0
" }}}

" YouCompleteMe: {{{
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_use_ultisnips_completer = 1

let g:ulti_expand_or_jump_res = 0
function! ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
inoremap <expr> <CR> pumvisible() ? "\<C-R>=ExpandSnippetOrCarriageReturn()\<CR>" : "\<CR>"
" }}}

" WinResizer: {{{
let g:winresizer_start_key = '<Leader>wr'
let g:winresizer_vert_resize=3
let g:winresizer_horiz_resize=3
" }}}

" ACK: {{{
let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}

" Oblique: {{{
autocmd! User Oblique
autocmd! User ObliqueStar
autocmd! User ObliqueRepeat

" autocmd User Oblique       normal! zz
" autocmd User ObliqueStar   normal! zz
" autocmd User ObliqueRepeat normal! zz

let g:oblique#incsearch_highlight_all=1
" }}}

" DBext: {{{
function! DBextPostResult(db_type, buf_nr)
    set syntax=sql
endfunction
" }}}

" Eclim: {{{
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimPhpValidate = 0
let g:EclimHtmlValidate = 0
" }}}

" FZF: {{{
let g:fzf_launcher = 'urxvt -title fzf-picker -geometry 120x30 -e sh -c %s'

command! FZFMru call fzf#run({
    \'source': "cat ~/.vim_mru_files | tail -n +2 | egrep -v '(^/tmp/|.vim_mru_files$)'",
    \'sink' : 'e',
    \'options': '-x -m',
    \})

command! FZFMruCwd call fzf#run({
    \'source': "cat ~/.vim_mru_files | tail -n +2 | grep -v '/.git/' |grep '" . getcwd() ."' | sed 's/^" . escape(getcwd(), '/') . "\\///'",
    \'sink' : 'e',
    \'options': '-x -m',
    \})

function! ClassTagClass()
  return "cat "
      \ . join(tagfiles(), ' ')
      \ . " | egrep '/\\^\\s*(public|private|protected|abstract)?\\s*class'"
      \ . " | awk '{print $1}'"
      \ . " | uniq"
endfunction

command! FZFTagClass call fzf#run({
    \'source' : ClassTagClass(),
    \'sink' : 'tag',
    \'down' : '50%',
    \})

command! FZFGitCheckoutBranch call fzf#run({
    \'source': 'git branch | sed "s/\#/\\\#/g" | sed "s/\s//g" | sed "/^\*/d"',
    \'sink' : ':silent !git checkout ',
    \'down' : '50%',
    \'options': '-x',
    \})

command! FZFTag if !empty(tagfiles()) | call fzf#run({
    \'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
    \'sink':   'tag',
    \'down' : '50%',
    \}) | else | echo 'No tags' | endif

command! FZFFind call fzf#run({
    \'sink': 'e',
    \'options': '-x -m',
    \})

function! s:buflist()
    redir => ls
    silent ls
    redir END
    return split(substitute(substitute(ls, '\s*wiersz \d\+\s*', '', 'g'), '"', '', 'g'), '\n')
endfunction

function! s:bufopen(e)
    execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

command! FZFBuffer call fzf#run({
    \   'source':  reverse(<sid>buflist()),
    \   'sink':    function('<sid>bufopen'),
    \   'options': '+m -x',
    \   'down' : '50%',
    \ })

" }}}

" FileBeagle: {{{
let g:filebeagle_suppress_keymaps = 1
" }}}

" BufferExplorer: {{{
let g:bufExplorerDefaultHelp=0
let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerReverseSort=0
let g:bufExplorerShowNoName=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=0
" }}}

" Goyo: {{{
let g:goyo_width = 120
" }}}

" Sneak: {{{
let g:sneak#s_next = 1
" }}}

" GitGutter: {{{
let g:gitgutter_enabled = 1
" let g:gitgutter_sign_column_always = 1
let g:gitgutter_max_signs = 1500
let g:gitgutter_map_keys = 0
nnoremap ]c :GitGutterNextHunk<CR>zz
nnoremap [c :GitGutterPrevHunk<CR>zz
nnoremap <leader>gp :GitGutterPreviewHunk<CR>
" }}}

" PHPUnitQF: {{{
let g:phpunit_cmd = "./bin/phpunit"
let g:phpunit_args = "-c app"
" }}}

" KeyBindings: {{{
"hard mode :)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

let g:mapleader = "\<Space>"

noremap j gj
noremap k gk

command! WS :w !sudo tee %<CR>

command! Json :%!python -m json.tool

nnoremap <leader>s :FZF src/DAC/BriefcaseBundle<CR>

nnoremap <leader>ws <c-w>s
nnoremap <leader>wv <c-w>v
nnoremap <leader>wh <c-w>H
nnoremap <leader>wj <c-w>J
nnoremap <leader>wk <c-w>K
nnoremap <leader>wl <c-w>L

nnoremap <leader>h <c-w>h
nnoremap <leader>j <c-w>j
nnoremap <leader>k <c-w>k
nnoremap <leader>l <c-w>l

nnoremap <leader>a :A<CR>

nmap <c-w>m <c-w>_

nmap <silent> <c-d> :silent call CloseWindowOrKillBuffer()<CR>

":echo expand('%:t')<CR>
nmap <silent> <c-p> :silent bp<CR>
nmap <silent> <c-n> :silent bn<CR>

nnoremap <Leader>n :set nonumber!<CR>

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 10<C-e>
nnoremap <C-y> 10<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

nnoremap <leader>t :BTags!<CR>
nnoremap <leader>T :TagbarOpenAutoClose<CR>

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gvd :Gvdiff<CR>
nnoremap <silent> <leader>gd :Git! diff<CR>
nnoremap <silent> <leader>gds :Git! diff --staged<CR>
nnoremap <silent> <leader>gda :Git! diff HEAD<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>glc :silent Glog -n 10 --no-merges<CR>:copen<CR>
nnoremap <silent> <leader>glp :silent Glog -n 10 --no-merges -- %<CR>

nnoremap <leader>y :YcmDiags<CR>
" nnoremap <leader>e :Errors<CR>

nnoremap <Leader>ff :FZFFind<CR>
nnoremap <leader>fl :FZFMru<CR>
nnoremap <leader>fm :FZFMruCwd<CR>

" nnoremap <Esc>P P'[v']=
" nnoremap <Esc>p p'[v']=

nnoremap <C-\> :vsplit<CR>:let word=expand("<cword>")<CR>:exec "tag" word<CR>

nnoremap gb :FZFBuffer<CR>
nnoremap <leader>gc :FZFGitCheckoutBranch<CR>

map Q @q

" highlight last inserted text
nnoremap gV `[v`]

nnoremap > ]mzt
nnoremap < [mzt

map <silent> _ <Plug>FileBeagleOpenCurrentWorkingDir
map <silent> - <Plug>FileBeagleOpenCurrentBufferDir
nmap <silent> H <Plug>FileBeagleOpenCurrentBufferDir

nnoremap <leader>c :Tags!<CR>
nnoremap <Leader>b :Buffers!<CR>

nnoremap <leader>sld :DBExecSQL SELECT datname as "List of databases" FROM pg_database WHERE not datistemplate ORDER BY datname<CR>

nnoremap <silent><CR> :silent BufExplorer<CR>
nnoremap <leader>go :Goyo<CR>

nnoremap <silent>L :silent b#<CR>
" nnoremap <silent>L :silent LustyBufferExplorer<CR>

nmap f <Plug>Sneak_s
nmap F <Plug>Sneak_S
xmap f <Plug>Sneak_s
xmap F <Plug>Sneak_S
omap f <Plug>Sneak_s
omap F <Plug>Sneak_S

" "replace 'f' with 1-char Sneak
" nmap f <Plug>Sneak_f
" nmap F <Plug>Sneak_F
" xmap f <Plug>Sneak_f
" xmap F <Plug>Sneak_F
" omap f <Plug>Sneak_f
" omap F <Plug>Sneak_F
"replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" nnoremap s :BufExplorer<CR>
nnoremap <silent><c-s> :silent w<CR>:call TmuxRepeat()<CR>

if has('nvim')
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
    tnoremap <ESC><ESC> <C-\><C-n>
endif

augroup Terminal
    au!
    au WinEnter term://* startinsert
augroup END

" nnoremap <C-]> <Esc>:exe "ptjump " . expand("<cword>")<Esc>

nnoremap ; :
" }}}

" AutoCMD-fileSpecific: {{{
augroup filespecific
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType sql,php,vim,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e
    autocmd FileType javascript setlocal omnifunc=syntaxcomplete#Complete
    autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
augroup END
" }}}

" Other: {{{
command! -nargs=1 Silent
    \ | execute ':silent !'.<q-args>
    \ | execute ':redraw!'

function! GetGitRootDir()
    let filePath = expand('%:p:h')
    let shellcmd = 'cd ' . filePath . ';'
        \ . 'basename $(readlink -f $(git rev-parse --show-cdup))'
        \ . '| sed "s/[ \r\n]//g"'

    return system(shellcmd)
endfunction

" nnoremap gp gg/\(extends\\|implements\) /e<CR>l<C-]>

function! OpenFileInLastWindow(shouldStayInPlugin)
    let line = substitute(getline('.'), '.\{-}\(\([0-9A-Za-z_-]\+/\)\+[0-9A-Za-z_-]\+\.\?[0-9A-Za-z_-]\+\(:\d\+\)\?\( on line \d\+\)\?\).*', '\1', '')
    let line = substitute(line, ' on line \(\d\+\)', ':\1', '')
    if line != getline('.')
        echo line
        let filePath = split(line, ':')

        if a:shouldStayInPlugin
            let sip = 'noautocmd wincmd p'
        else
            let sip = ''
        endif

        if len(filePath) == 2
            silent! exe "noautocmd wincmd p | e +" . filePath[1] . " " . filePath[0]
            normal! zz
            exe sip
        else
            silent! exe "noautocmd wincmd p | e " . filePath[0]
            exe sip
        endif
    endif
endfunction

function! RunPHPUnitTest(filter)
    if a:filter
        normal! T yw
        let args = 'src'
    else
        let args = expand("%")
    endif

    let result = system('bin/phpunit -c app ' . args . ' | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"')

    silent! exe "noautocmd botright pedit __PHPUnit_Result__"
    silent! exe "noautocmd wincmd P"
    normal! ggdG
    setlocal wrap
    setlocal number
    setlocal buftype=nofile
    setlocal nobuflisted

    map <buffer> j j
    map <buffer> k k

    nnoremap <silent><buffer> <CR> :silent call OpenFileInLastWindow(0)<CR>
    nnoremap <silent><buffer> o :silent call OpenFileInLastWindow(1)<CR>

    syn match testNamespace "\([0-9A-Za-z_-]\+\\\)\+[0-9A-Za-z_-]\+\(::[0-9A-Za-z_-]\+\)\?"
    hi! def link testNamespace Function

    syn match testComment "^#"
    hi! def link testComment Comment

    syn match testFail "FAILURES!"
    hi! def link testFail ErrorMsg

    syn match testOk "OK (.*"
    hi! def link testOk Directory

    syn match testFailF "# \d\+) [^ ]\+"
    hi! def link testFailF ErrorMsg

    syn match testFileName "[0-9A-Za-z_-]\+\ze\." contained
    hi! def link testFileName Title

    syn match testFile "\([0-9A-Za-z_-]\+/\)\+[0-9A-Za-z_-]\+\.\?[0-9A-Za-z_-]\+" contains=testFileName
    hi! def link testFile MoreMsg

    let output = substitute(result, getcwd() . '/', '', "g")
    let maxLineLength = winwidth(winnr()) - &numberwidth -3
    let lines = split(output, '\v\n')

    if len(lines) > 6 && lines[6] =~ 'There were \d\+ errors:'
        let lines = lines[8:]
        let startLine = 4
    else
        let startLine = 1
    endif

    let commentedLines = map(copy(lines), '"# " . v:val')
    call append(0, commentedLines)
    normal! Gdd

    silent! exe "normal! " . startLine . "gg"
    normal! 0
    setlocal cursorline
    " silent! exe "noautocmd wincmd p"
endfunction

function! ToggleTest()
    let isTest = bufname('%') =~ 'Test.php$'

    let filePath = expand('%:p')

    if isTest
        let filePath = substitute(filePath, "BriefcaseBundle/Tests", "BriefcaseBundle", "")
        let filePath = substitute(filePath, "Test.php$", ".php", "")
    else
        let filePath = substitute(filePath, "BriefcaseBundle", "BriefcaseBundle/Tests", "")
        let filePath = substitute(filePath, ".php$", "Test.php", "")
    endif

    execute 'edit' filePath
endfunction

nnoremap <leader>i :call RunPHPUnitTest(0)<cr>
nnoremap <leader>o :call RunPHPUnitTest(1)<cr>

nnoremap gf gF

" nnoremap K :call ToggleTest()<CR>
nnoremap K :A<CR>
" Return to last edit position when opening files (You want this!)
" autocmd BufReadPost *
"      \ if line("'\"") > 0 && line("'\"") <= line("$") |
"      \   exe "normal! g`\"" |
"      \ endif
" Remember info about open buffers on close
" set viminfo^=%

function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " never bdelete a nerd tree
    " if matchstr(expand("%"), 'NERD') == 'NERD'
    "   wincmd c
    "   return
    " endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
endfunction "}}}

fun! LuciousLightColors()
    set background=light
    " LuciusLightHighContrast
    LuciusLight
    " hi CursorLineNr ctermbg=cyan
    " hi StatusLine ctermbg=cyan ctermfg=black
    hi! Search ctermfg=238 ctermbg=153
endfun

call LuciousLightColors()

fun! LuciousDarkColors()
    set background=dark
    LuciusDark
endfun
" }}}

" reverse words order
" '<,'>!while IFS= read -r; do echo -n "$REPLY " | tac -s' '; echo; done
