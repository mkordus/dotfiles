" vi: fdm=marker
"
let g:mapleader = "\<Space>"

source ~/dotfiles/vim/config/settings.vim
source ~/dotfiles/vim/config/plug.vim
source ~/dotfiles/vim/config/autocmd.vim

if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif

" Colorscheme: {{{

if !has('nvim')
    set t_Co=256
endif
syntax enable
set bg=dark
let g:solarized_termtrans = 1
colorscheme solarized

" }}}
" KeyBindings: {{{

command! Json :%!python -m json.tool

nnoremap <C-\> :vsplit<CR>:let word=expand("<cword>")<CR>:exec "tag" word<CR>
" nnoremap <C-]> <Esc>:exe "ptjump " . expand("<cword>")<Esc>
" }}}
" Other: {{{
command! -nargs=1 Silent
    \ | execute ':silent !'.<q-args>
    \ | execute ':redraw!'

function! OpenFileInLastWindow(shouldStayInPlugin)
    let line = substitute(getline('.'), '.\{-}\(\([0-9A-Za-z_-]\+/\)\+[0-9A-Za-z_-]\+\.\?[0-9A-Za-z_-]\+\(:\d\+\)\?\( on line \d\+\)\?\).*', '\1', '')
    let line = substitute(line, ' on line \(\d\+\)', ':\1', '')
    if line != getline('.')
        echo line
        let filePath = split(line, ':')

        if a:shouldStayInPlugin
            let sip = 'noautocmd wincmd p'
        else
            let sip = ''
        endif

        if len(filePath) == 2
            silent! exe "noautocmd wincmd p | e +" . filePath[1] . " " . filePath[0]
            normal! zz
            exe sip
        else
            silent! exe "noautocmd wincmd p | e " . filePath[0]
            exe sip
        endif
    endif
endfunction

function! RunPHPUnitTest(filter)
    if a:filter
        let args = 'src'
    else
        let args = expand("%")
    endif

    if filereadable("app/phpunit.xml.dist")
        let configPath = '-c app '
    else
        let configPath = ''
    endif
    let configPath = '-c app/phpunit.portal.xml '
    " let configPath = '-c app/phpunit.fakty.xml '
    " let phpunitPath = 'bin/phpunit'
    let phpunitPath = '~/.config/composer/vendor/bin/phpunit'

    let result = system('php ' .phpunitPath . ' ' . configPath . args . ' 2>&1 | ~/dotfiles/colorize_phpunit.sh > swap.tmp &')
endfunction

function! ToggleTest()
    let isTest = bufname('%') =~ 'Test.php$'

    let filePath = expand('%:p') 
    if isTest
        let filePath = substitute(filePath, "Bundle/Tests", "Bundle", "")
        let filePath = substitute(filePath, "Test.php$", ".php", "")
    else
        let filePath = substitute(filePath, "Bundle", "Bundle/Tests", "")
        let filePath = substitute(filePath, ".php$", "Test.php", "")
    endif

    execute 'edit' filePath
endfunction

nnoremap <leader>i :call RunPHPUnitTest(0)<cr>
" nnoremap <leader>o :call RunPHPUnitTest(1)<cr>
" reverse words order
" '<,'>!while IFS= read -r; do echo -n "$REPLY " | tac -s' '; echo; done
" }}}
