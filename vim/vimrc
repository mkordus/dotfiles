" vi: fdm=marker
" Plug: {{{
set nocompatible
filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')

Plug 'szw/vim-ctrlspace'
Plug 'godlygeek/tabular'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-vinegar'
Plug 'jimsei/winresizer'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }

Plug 'michaeljsmith/vim-indent-object'

Plug 'christoomey/vim-tmux-navigator'

Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'

Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'

Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'

Plug 'vim-scripts/dbext.vim', { 'for': ['php', 'sql']}
Plug 'scrooloose/syntastic'
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'
" Plug 'mattn/webapi-vim'

" Plug 'junegunn/vim-peekaboo'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
" Plug 'junegunn/rainbow_parentheses.vim'
" Plug 'amdt/vim-niji'
" Plug 'kien/rainbow_parentheses.vim'

Plug 'justinmk/vim-sneak'

" Plug 'Yggdroot/indentLine'

" Plug 'kshenoy/vim-signature'
" Plug 'airblade/vim-gitgutter'
" colorschemes {{{
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/seoul256.vim'
Plug 'tomasr/molokai'
Plug 'chriskempson/vim-tomorrow-theme'
" }}}
" git {{{
" }}}
" languages {{{
Plug 'othree/html5.vim', {'for': ['html']}
Plug 'tpope/vim-markdown'
" Plug 'StanAngeloff/php.vim', { 'for': ['php']}
" Plug 'vim-scripts/phpfolding.vim', { 'for': ['php']}
Plug 'beyondwords/vim-twig'
Plug 'leshill/vim-json', {'for': ['json', 'javascript']}
Plug 'groenewege/vim-less', { 'for': ['less'] }
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript'] }
" Plug 'dart-lang/dart-vim-plugin'
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
" }}}
" other {{{
" Plug 'vim-scripts/listmaps.vim'
" }}}
call plug#end()

filetype plugin indent on
" }}}
" PlugLazyLoading {{{
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'YouCompleteMe')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END
" }}}
" VimSettings: {{{
set encoding=utf-8
set undolevels=1000
set showmode
set noshowcmd

let g:mapleader = "\<Space>"
nmap <leader>ev :edit $MYVIMRC<CR>
nmap <leader>es :w !sudo tee %<CR>
nmap <leader>ew :w<CR>

nmap <leader>ws <c-w>s
nmap <leader>wv <c-w>v
nmap <leader>wH <c-w>H
nmap <leader>wJ <c-w>J
nmap <leader>wK <c-w>K
nmap <leader>wL <c-w>L

nmap <c-d> :call CloseWindowOrKillBuffer()<cr>
nmap <c-n> :bn<CR>
nmap <c-p> :bp<CR>

" set cpoptions+=n
nnoremap <Leader>l :set nonumber!<CR>

map j gj
map k gk

" nnoremap <c-h> <c-w>h
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-l> <c-w>l

set splitbelow
set splitright

"command line mode
set wildmenu
set wildmode=longest,list
set wildignorecase
set wildignore+=*/.git/*,*/tmp/*,*/cache/*

"matchparen
let loaded_matchparen = 1
set noshowmatch

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw
set ttyfast

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

set ruler

"speed up scrolling
set scrolloff=0
set sidescrolloff=2

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

" use system clipboard instead of default vim
set clipboard=unnamedplus

set laststatus=2

" sql
let g:php_sql_query=0

set mouse=a

set nolist
set foldmethod=manual
set completeopt=longest,menuone

"hard mode :)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

set wildignorecase

let php_minlines=1000
" }}}
" Gvim {{{
set gcr=a:block
set gcr+=a:blinkon0

set guioptions-=T
set guioptions-=r
set guioptions-=L
set guioptions-=m
set guioptions-=e
set showtabline=1
set guifont=Liberation\ Mono\ 11
set mousehide
" }}}
" Colorscheme {{{
syntax enable
set bg=dark
colorscheme seoul256
" }}}
" JavascriptLibrariesSyntax {{{
let g:used_javascript_libs = 'jquery,angularjs,jasmine'
" }}}
" Tagbar {{{
nnoremap <leader>t :TagbarOpenAutoClose<CR>
let g:tagbar_width = 40
let g:tagbar_compact = 1
let g:tagbar_sort = 0
" }}}
" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsEditSplit = "vertical"
" }}}
" Fugitive {{{
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gvd :Gvdiff<CR>
nnoremap <silent> <leader>gd :Git! diff<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
" }}}
" Syntastic {{{
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0
" }}}
" YouCompleteMe {{{
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
" let g:ycm_filetype_specific_completion_to_disable = {'php': 1}
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_use_ultisnips_completer = 1
" }}}
" File Picker: {{{
" if has("gui_running")
" if exists('$WINDOWID')
"     nnoremap <Leader>f :GPickFile<CR>
" else
    nnoremap <Leader>f :FZFFind<CR>
" endif
" }}}
" WinResizer: {{{
let g:winresizer_start_key = '<Leader>wr'
let g:winresizer_vert_resize=5
let g:winresizer_horiz_resize=5
" }}}
" ACK: {{{
let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}
" AutoCMD-fileSpecific: {{{
augroup filespecific
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType sql,php,vim,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e
    autocmd FileType javascript setlocal omnifunc=syntaxcomplete#Complete
augroup END
" }}}
" LocalConfig {{{
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif
" }}}
" Clear autocommand
autocmd! User Oblique
autocmd! User ObliqueStar
autocmd! User ObliqueRepeat

autocmd User Oblique       normal! zz
autocmd User ObliqueStar   normal! zz
autocmd User ObliqueRepeat normal! zz

let g:oblique#incsearch_highlight_all=1

set virtualedit=block

set hidden
set shortmess=aIT

nnoremap <Esc>P P'[v']=
nnoremap <Esc>p p'[v']=

" nmap <Leader>c :set cursorline!<Bar>set cursorcolumn!<CR>
" set cursorline
" set cursorcolumn

function! DBextPostResult(db_type, buf_nr)
    set syntax=sql
endfunction

command! -nargs=1 Silent
    \ | execute ':silent !'.<q-args>
    \ | execute ':redraw!'

let g:EclimCompletionMethod = 'omnifunc'
nnoremap <silent> <buffer> <cr> :PhpSearchContext<cr>

" nnoremap <Leader>s :let old_pwd = getcwd()<CR>:FZF src<CR>:silent exec 'cd ' . old_pwd<CR>

set foldcolumn=0
" highlight! FoldColumn ctermfg=237 ctermbg=237 " Make it the background colour

nnoremap <C-\> :vsplit<CR>:let word=expand("<cword>")<CR>:exec "tag" word<CR>

nnoremap gb :ls<CR>:b

let g:fzf_launcher = 'urxvt -title fzf-picker -geometry 120x30 -e sh -c %s'

command! FZFMru call fzf#run({
    \'source': v:oldfiles,
    \'sink' : 'e ',
    \'options' : '-m',
    \'up' : '60%',
    \})

function! ClassTagCommand()
  return "cat "
      \ . join(tagfiles(), ' ')
      \ . " | egrep '/\\^\\s*(public|private|protected|abstract)?\\s*class' "
      \ . "| awk '{print $1}' "
      \ . "| uniq"
endfunction

nmap <leader>c :call fzf#run({
    \'source'     : ClassTagCommand(),
    \'sink'       : 'tjump',
    \'down' : '60%',
    \})<CR>


command! FZFTag2 if !empty(tagfiles()) | call fzf#run({
\   'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
\   'sink':   'tag',
\ }) | else | echo 'No tags' | endif

command! FZFFind call fzf#run({
    \'sink' : 'e',
    \'down' : '60%',
    \})

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(substitute(substitute(ls, '\s*wiersz \d\+\s*', '', 'g'), '"', '', 'g'), '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>b :call fzf#run({
    \   'source':  reverse(<sid>buflist()),
    \   'sink':    function('<sid>bufopen'),
    \   'options': '+m',
    \   'down': '40%',
    \ })<CR>

set updatetime=500
let &showbreak = 'â†³ '
set nostartofline

 function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " never bdelete a nerd tree
    " if matchstr(expand("%"), 'NERD') == 'NERD'
    "   wincmd c
    "   return
    " endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction "}}}
map Q @q

