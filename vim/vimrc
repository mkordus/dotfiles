" vi: fdm=marker

" Plugins: {{{
set nocompatible

filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'mileszs/ack.vim'
Plug 'tyok/nerdtree-ack'

Plug 'kien/ctrlp.vim'
"Plug 'DavidEGx/ctrlp-smarttabs'

Plug 'morhetz/gruvbox'

Plug 'tomtom/tcomment_vim'
" Plug 'tpope/vim-surround', { 'on': [] }
" Plug 'kien/rainbow_parentheses.vim', { 'for': ['php', 'sql']}

" Plug 'itchyny/lightline.vim'
Plug 'amiorin/vim-project'

Plug 'vim-scripts/dbext.vim', { 'for': ['php', 'sql']}
Plug 'scrooloose/syntastic', { 'for': ['php', 'javascript', 'python']}
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'honza/vim-snippets', { 'on': [] }
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'

"Plug 'sheerun/vim-polyglot'
"Plug 'tpope/vim-git'
Plug 'othree/html5.vim'
Plug 'tpope/vim-markdown'
Plug 'StanAngeloff/php.vim'

"Plug 'exu/pgsql.vim', {'for': ['php', 'sql']}
Plug 'brookhong/DBGPavim', {'for': ['php']}
" Plug 'jelera/vim-javascript-syntax', { 'for': ['javascript']}

Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'

Plug 'christoomey/vim-tmux-navigator'

call plug#end()

filetype plugin indent on

"lazy loading
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'vim-snippets', 'YouCompleteMe')
        \| call plug#load('vim-surround')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END

" }}}
" Settings: {{{

"main
set encoding=utf-8
set undolevels=1000
set showmatch
set showmode
set noshowcmd

let g:mapleader = "\<Space>"
inoremap jk <Esc>
inoremap kj <Esc>
nmap <leader>ev :edit $MYVIMRC<CR>
nmap <leader>ws :w !sudo tee %<CR>

set number
nnoremap <Leader>l :set nonumber!<CR>
set ttyfast

map j gj
map k gk

set splitbelow
set splitright

nmap <leader>h :noh<CR>

"command line mode
set wildmenu
set wildmode=longest:list,full
set wildignorecase
set wildignore+=*/.git/*,*/tmp/*,*/cache/*

"colors
syntax enable
colorscheme gruvbox
set background=dark
if !has('gui_running')
  set t_Co=256
endif

let loaded_matchparen = 0

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4
set et

"gVim options
set guioptions-=T
set guioptions-=r
set guioptions-=L
set guioptions-=m
set guioptions-=e
set showtabline=0
set guifont=Liberation\ Mono\ for\ Powerline\ 11
set mousehide

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s

"speed up scrolling
set scrolljump=8

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

" use system clipboard instead of default vim
set clipboard=unnamedplus

set gcr=a:block
set gcr+=a:blinkon0

set laststatus=2

" coments
hi Comment cterm=NONE

"visual
hi Visual cterm=NONE ctermbg=239

" fast windows close
inoremap <C-q> <esc>:q<cr>
nnoremap <C-q> :q<cr>

" sql
let g:php_sql_query=0

function! ClearSQLSchema()
    execute 'g/^--\|^GRANT\|^REVOKE\|OWNER\|PRIVILEGES FOR ROLE\|^$/d'
    execute 'g/CREATE /\n\0/'
endfunction

"better selection
nnoremap gG ggVG

"select php heredoc
vnoremap ih <ESC>?<<<<CR>jV/SQL;<CR>k

set mouse=a

set listchars=tab:▸\ ,eol:¬
set list
" }}}
" PluginsSettings {{{
"nerdtree
nnoremap <leader>n :NERDTreeTabsToggle<CR>
nnoremap <leader>r :NERDTreeFind<CR>
let g:NERDTreeShowHidden=1
let g:NERDTreeChDirMode = 2
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:NERDTreeWinSize = 30

" DBGPavim
let g:dbgPavimPort = 9000
let g:dbgPavimBreakAtEntry = 0

" tagbar
nnoremap <leader>t :TagbarOpenAutoClose<CR>
let g:tagbar_width = 45

" YCM
set completeopt=menuone,longest

"ultiSnips
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "ultisnips-snippets"]
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsExpandTrigger="<S-CR>"

"fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gvdiff<CR>
nnoremap <silent> <leader>gb :Gblame<CR>

"project
let g:project_use_nerdtree = 1
set rtp+=~/.vim/bundle/vim-project/
call project#rc("~/projects")

"ctrlP
let g:ctrlp_working_path_mode = 'rw'
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <C-T> :CtrlPSmartTabs<CR>

if executable('ag')
    let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
elseif executable('ack-grep')
    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
elseif executable('ack')
    let s:ctrlp_fallback = 'ack %s --nocolor -f'
else
    let s:ctrlp_fallback = 'find %s -type f'
endif

"syntastic
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0

" search vim-oblique
hi! def link ObliquePrompt       None
hi! def link ObliqueCurrentMatch Function

" Goyo
nnoremap <Leader>go :Goyo<CR>

"postgresql
"let g:sql_type_default = 'pgsql'

" }}}
" AutoCMSs: {{{
augroup filespecific
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType sql,php,vim autocmd BufWritePre <buffer> :%s/\s\+$//e
augroup END
" }}}
" localConfig: {{{
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif
" }}}
