" Plug: {{{
set nocompatible
filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')

" Plug 'vim-scripts/genutils'
" Plug 'vim-scripts/SelectBuf'

" Plug 'edkolev/tmuxline.vim'
" Plug 'itchyny/lightline.vim'

Plug 'yegappan/mru'
Plug 'tpope/vim-abolish'
Plug 'szw/vim-ctrlspace'
Plug 'godlygeek/tabular'
Plug 'mileszs/ack.vim'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'jimsei/winresizer'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }

Plug 'michaeljsmith/vim-indent-object'

Plug 'christoomey/vim-tmux-navigator'

Plug 'prestidigitator92/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'

Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'
Plug 'junegunn/vim-fnr'

Plug 'tpope/vim-fugitive'

Plug 'vim-scripts/dbext.vim', { 'for': ['php', 'sql']}
Plug 'scrooloose/syntastic'
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'
" Plug 'mattn/webapi-vim'

" Plug 'junegunn/vim-peekaboo'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
" Plug 'junegunn/rainbow_parentheses.vim'

Plug 'justinmk/vim-sneak'

Plug 'vim-scripts/listmaps.vim'
" Gutter: {{{
" Plug 'kshenoy/vim-signature'
" Plug 'airblade/vim-gitgutter'
" }}}
" Colorschemes: {{{
Plug 'croaker/mustang-vim'
Plug 'vim-scripts/xoria256.vim'
Plug 'prestidigitator92/vim-wombat256i'
Plug 'vim-scripts/wombat256.vim'
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/seoul256.vim'
Plug 'tomasr/molokai'
Plug 'chriskempson/vim-tomorrow-theme'
" }}}
" Syntax: {{{
Plug 'tpope/vim-git'
Plug 'othree/html5.vim', {'for': ['html']}
Plug 'tpope/vim-markdown'
" Plug 'StanAngeloff/php.vim', { 'for': ['php']}
" Plug 'vim-scripts/phpfolding.vim', { 'for': ['php']}
Plug 'beyondwords/vim-twig'
Plug 'leshill/vim-json', {'for': ['json', 'javascript']}
Plug 'groenewege/vim-less', { 'for': ['less'] }
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript'] }
" Plug 'dart-lang/dart-vim-plugin'
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
Plug 'fatih/vim-go'
" }}}
call plug#end()

filetype plugin indent on
" PlugLazyLoading: {{{
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'YouCompleteMe')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END
" }}}
" }}}
" Colorscheme: {{{
set t_Co=256
syntax enable
set bg=dark
colorscheme wombat256i
" }}}
" VimSettings: {{{

set noruler

set encoding=utf-8
set undolevels=1000
set showmode
set noshowcmd

" set cpoptions+=n
set nonu

set splitbelow
set splitright

"command line mode
set wildmenu
set wildmode=longest,list
set wildignorecase
set wildignore+=*/.git/*,*/tmp/*,*/cache/*

"matchparen
let loaded_matchparen = 1
set noshowmatch

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw
set ttyfast

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

"speed up scrolling
set scrolloff=8
set sidescrolloff=2

" use system clipboard instead of default vim
set clipboard=unnamedplus

set laststatus=0

let g:php_sql_query=0

set mouse=a

set nolist
set foldmethod=manual
set completeopt=longest,menuone

set wildignorecase

let php_minlines=1000

set virtualedit=block

set hidden
set shortmess=aIT

set foldcolumn=0

set updatetime=500
let &showbreak = '↳ '
set nostartofline

set cursorline

" }}}
" LocalConfig: {{{
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif
" }}}
" JavascriptLibrariesSyntax: {{{
let g:used_javascript_libs = 'jquery,angularjs,jasmine'
" }}}
" Tagbar: {{{
let g:tagbar_width = 45
let g:tagbar_compact = 1
let g:tagbar_sort = 0
" }}}
" UltiSnips: {{{
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsEditSplit = "vertical"
" }}}
" Syntastic: {{{
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=0
let g:syntastic_always_populate_loc_list=0
" }}}
" YouCompleteMe: {{{
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_use_ultisnips_completer = 1
" }}}
" WinResizer: {{{
let g:winresizer_start_key = '<Leader>wr'
let g:winresizer_vert_resize=3
let g:winresizer_horiz_resize=3
" }}}
" ACK: {{{
let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}
" Oblique: {{{
autocmd! User Oblique
autocmd! User ObliqueStar
autocmd! User ObliqueRepeat

autocmd User Oblique       normal! zz
autocmd User ObliqueStar   normal! zz
autocmd User ObliqueRepeat normal! zz

let g:oblique#incsearch_highlight_all=1
" }}}
" DBext: {{{
function! DBextPostResult(db_type, buf_nr)
    set syntax=sql
endfunction
" }}}
" Eclim: {{{
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimPhpValidate = 0
let g:EclimHtmlValidate = 0
" }}}
" FZF: {{{
let g:fzf_launcher = 'urxvt -title fzf-picker -geometry 120x30 -e sh -c %s'

command! FZFMru call fzf#run({
    \'source': "cat ~/.vim_mru_files | tail -n +2 | egrep -v '(^/tmp/|.vim_mru_files$)'",
    \'sink' : 'e ',
    \'down' : '100%',
    \'options': '-x -m',
    \})

function! ClassTagCommand()
  return "cat "
      \ . join(tagfiles(), ' ')
      \ . " | egrep '/\\^\\s*(public|private|protected|abstract)?\\s*class' "
      \ . "| awk '{print $1}' "
      \ . "| uniq"
endfunction

nmap <leader>c :call fzf#run({
    \'source'     : ClassTagCommand(),
    \'sink'       : 'tjump',
    \'down' : '60%',
    \})<CR>

command! FZFGitCheckoutBranch call fzf#run({
    \'source': 'git branch | sed "s/\#/\\\#/g" | sed "s/\s//g" | sed "/^\*/d"',
    \'sink' : ':silent !git checkout ',
    \'down' : '40%',
    \'options': '-x',
    \})

command! FZFTag2 if !empty(tagfiles()) | call fzf#run({
    \'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
    \'sink':   'tag',
    \}) | else | echo 'No tags' | endif

command! FZFFind call fzf#run({
    \'sink': 'e',
    \'down': '60%',
    \'options': '-x -m',
    \})

function! s:buflist()
    redir => ls
    silent ls
    redir END
    return split(substitute(substitute(ls, '\s*wiersz \d\+\s*', '', 'g'), '"', '', 'g'), '\n')
endfunction

function! s:bufopen(e)
    execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>b :call fzf#run({
    \   'source':  reverse(<sid>buflist()),
    \   'sink':    function('<sid>bufopen'),
    \   'options': '+m',
    \   'down': '40%',
    \ })<CR>
" }}}
" LightLine: {{{
let g:lightline = {
      \ 'colorscheme': 'solarized_dark',
      \ 'active': {
      \   'left': [ [],
      \             ['filename'] ],
      \   'right': [ ['syntastic'], ['percent'], ['fugitive'] ]
      \ },
      \ 'inactive': {
      \   'right': []
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified',
      \   'filename': 'MyFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? ' '._ : ''
  endif
  return ''
endfunction

function! MyFilename()
    let nLines = len(string(line("$")))
    let i = 1
    let prefix = ''

    while i <= nLines
        let prefix .= ' '
        let i += 1
    endwhile

    return prefix .
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction
" }}}
" MRU: {{{
let MRU_Max_Menu_Entries = 500
" }}}
" CtrlSpace: {{{
let g:ctrlspace_height = 333
let g:ctrlspace_max_height = 333
" }}}
" FileBeagle: {{{
let g:filebeagle_suppress_keymaps = 1
" }}}
" KeyBindings: {{{
"hard mode :)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

let g:mapleader = "\<Space>"

map j gj
map k gk

nnoremap <leader>vv :e ~/dotfiles/vim/vimrc<CR>
nnoremap <leader>vs :source $MYVIMRC<CR>
nmap <leader>s :w !sudo tee %<CR>

nmap <leader>ws <c-w>s
nmap <leader>wv <c-w>v
nmap <leader>wH <c-w>H
nmap <leader>wJ <c-w>J
nmap <leader>wK <c-w>K
nmap <leader>wL <c-w>L

nmap <c-d> <c-w>c

":echo expand('%:t')<CR>
nmap <silent> <c-p> :CtrlSpaceGoUp<CR>
nmap <silent> <c-n> :CtrlSpaceGoDown<CR>

nnoremap <Leader>l :set nonumber!<CR>

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

nnoremap <leader>t :TagbarOpenAutoClose<CR>

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gvd :Gvdiff<CR>
nnoremap <silent> <leader>gd :Git! diff<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :silent Glog -n 10 --no-merges<CR>:copen<CR>

nnoremap <leader>y :YcmDiags<CR>
nnoremap <leader>e :Errors<CR>

nnoremap <Leader>f :FZFFind<CR>

nnoremap <Esc>P P'[v']=
nnoremap <Esc>p p'[v']=

nnoremap <C-\> :vsplit<CR>:let word=expand("<cword>")<CR>:exec "tag" word<CR>

nnoremap <leader>m :FZFMru<CR>
nnoremap <leader>gc :FZFGitCheckoutBranch<CR>

map Q @q

" highlight last inserted text
nnoremap gV `[v`]

nnoremap > ]m
nnoremap < [m

map <silent> <Leader>d  <Plug>FileBeagleOpenCurrentWorkingDir
map <silent> -          <Plug>FileBeagleOpenCurrentBufferDir

" }}}
" AutoCMD-fileSpecific: {{{
augroup filespecific
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType sql,php,vim,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e
    autocmd FileType javascript setlocal omnifunc=syntaxcomplete#Complete
augroup END
" }}}
" Other: {{{
command! -nargs=1 Silent
    \ | execute ':silent !'.<q-args>
    \ | execute ':redraw!'

function! GetGitRootDir()
    let filePath = expand('%:p:h')
    let shellcmd = 'cd ' . filePath . ';'
        \ . 'basename $(readlink -f $(git rev-parse --show-cdup))'
        \ . '| sed "s/[ \r\n]//g"'

    return system(shellcmd)
endfunction
" }}}
" vi: fdm=marker
