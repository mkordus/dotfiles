" Plug: {{{
set nocompatible
filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')

Plug 'radenling/vim-dispatch-neovim'
Plug 'prestidigitator92/vim-phpunitqf'
Plug 'jlanzarotta/bufexplorer'
Plug 'terryma/vim-expand-region'
Plug 'triglav/vim-visual-increment'

Plug 'prestidigitator92/mru'
" Plug 'tpope/vim-flagship'
Plug 'tpope/vim-abolish'
Plug 'godlygeek/tabular'
Plug 'mileszs/ack.vim'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'jimsei/winresizer'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }

Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-tbone'

Plug 'michaeljsmith/vim-indent-object'

Plug 'christoomey/vim-tmux-navigator'

Plug 'prestidigitator92/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'

Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'
Plug 'junegunn/vim-fnr'

Plug 'tpope/vim-fugitive'

Plug 'vim-scripts/dbext.vim', { 'for': ['php', 'sql']}
Plug 'scrooloose/syntastic'
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'majutsushi/tagbar'
Plug 'jiangmiao/auto-pairs'

" Plug 'mhinz/vim-signify'
Plug 'airblade/vim-gitgutter'

" Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
" Plug 'junegunn/rainbow_parentheses.vim'

Plug 'justinmk/vim-sneak'

" Plug 'sjbach/lusty'

" Plug 'vim-scripts/listmaps.vim'
" Colorschemes: {{{
Plug 'jpo/vim-railscasts-theme'
Plug 'vim-scripts/candycode.vim'
Plug 'jonathanfilip/vim-lucius'
Plug 'croaker/mustang-vim'
Plug 'prestidigitator92/vim-wombat256i'
Plug 'vim-scripts/wombat256.vim'
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/seoul256.vim'
Plug 'tomasr/molokai'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'prestidigitator92/vim-hybrid'
Plug 'sheerun/vim-wombat-scheme'
" }}}
" Syntax: {{{
Plug 'tpope/vim-git'
Plug 'othree/html5.vim', {'for': ['html']}
Plug 'tpope/vim-markdown'
" Plug 'StanAngeloff/php.vim', { 'for': ['php']}
" Plug 'vim-scripts/phpfolding.vim', { 'for': ['php']}
Plug 'beyondwords/vim-twig'
Plug 'leshill/vim-json', {'for': ['json', 'javascript']}
Plug 'groenewege/vim-less', { 'for': ['less'] }
" Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript'] }
" Plug 'dart-lang/dart-vim-plugin'
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
Plug 'fatih/vim-go'
Plug 'keith/tmux.vim'
" }}}
call plug#end()

filetype plugin indent on
" PlugLazyLoading: {{{
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'YouCompleteMe')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END
" }}}
" }}}
" Colorscheme: {{{
set t_Co=256
syntax enable
set bg=light
let g:solarized_termcolors=256
" let g:solarized_termtrans=1
" let g:solarized_contrast="high"
let g:hybrid_use_Xresources = 1
colorscheme lucius
" }}}
" VimSettings: {{{

set noruler

set encoding=utf-8
set undolevels=1000
set showmode
set noshowcmd

set cpoptions+=n
set number
set numberwidth=5

set splitbelow
set splitright

"command line mode
set wildmenu
set wildmode=longest,list
set wildignorecase
set wildignore+=*/tmp/*,*/cache/*

"matchparen
let loaded_matchparen = 1
set noshowmatch

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw
set ttyfast

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

"speed up scrolling
set scrolloff=5
set sidescrolloff=3

" use system clipboard instead of default vim
set clipboard=unnamedplus

set laststatus=1

let g:php_sql_query=0

set mouse=a

set nolist
set foldmethod=manual
set completeopt=longest,menuone

set wildignorecase

let php_minlines=1000

set virtualedit=block

set hidden
set shortmess=aIT

set foldcolumn=0

set updatetime=500
let &showbreak = 'â†³ '
set nostartofline

set nocursorline
set nocursorcolumn

set showtabline=0
" }}}
" LocalConfig: {{{
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif
" }}}
" JavascriptLibrariesSyntax: {{{
let g:used_javascript_libs = 'jquery,angularjs,jasmine'
" }}}
" Tagbar: {{{
" 45
let g:tagbar_width = 85
let g:tagbar_compact = 1
let g:tagbar_sort = 0
" }}}
" UltiSnips: {{{
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsEditSplit = "vertical"
" }}}
" Syntastic: {{{
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=0
let g:syntastic_always_populate_loc_list=0
" }}}
" YouCompleteMe: {{{
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_use_ultisnips_completer = 1
" }}}
" WinResizer: {{{
let g:winresizer_start_key = '<Leader>wr'
let g:winresizer_vert_resize=3
let g:winresizer_horiz_resize=3
" }}}
" ACK: {{{
let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}
" Oblique: {{{
autocmd! User Oblique
autocmd! User ObliqueStar
autocmd! User ObliqueRepeat

" autocmd User Oblique       normal! zz
" autocmd User ObliqueStar   normal! zz
" autocmd User ObliqueRepeat normal! zz

let g:oblique#incsearch_highlight_all=1
" }}}
" DBext: {{{
function! DBextPostResult(db_type, buf_nr)
    set syntax=sql
endfunction
" }}}
" Eclim: {{{
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimPhpValidate = 0
let g:EclimHtmlValidate = 0
" }}}
" FZF: {{{
let g:fzf_launcher = 'urxvt -title fzf-picker -geometry 120x30 -e sh -c %s'

command! FZFMru call fzf#run({
    \'source': "cat ~/.vim_mru_files | tail -n +2 | egrep -v '(^/tmp/|.vim_mru_files$)'",
    \'sink' : 'e',
    \'options': '-x -m',
    \})

command! FZFMruCwd call fzf#run({
    \'source': "cat ~/.vim_mru_files | tail -n +2 | grep -v '/.git/' |grep '" . getcwd() ."' | sed 's/^" . escape(getcwd(), '/') . "\\///'",
    \'sink' : 'e',
    \'options': '-x -m',
    \})

function! ClassTagClass()
  return "cat "
      \ . join(tagfiles(), ' ')
      \ . " | egrep '/\\^\\s*(public|private|protected|abstract)?\\s*class'"
      \ . " | awk '{print $1}'"
      \ . " | uniq"
endfunction

command! FZFTagClass call fzf#run({
    \'source' : ClassTagClass(),
    \'sink' : 'tag',
    \'down' : '50%',
    \})

command! FZFGitCheckoutBranch call fzf#run({
    \'source': 'git branch | sed "s/\#/\\\#/g" | sed "s/\s//g" | sed "/^\*/d"',
    \'sink' : ':silent !git checkout ',
    \'down' : '50%',
    \'options': '-x',
    \})

command! FZFTag if !empty(tagfiles()) | call fzf#run({
    \'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
    \'sink':   'tag',
    \'down' : '50%',
    \}) | else | echo 'No tags' | endif

command! FZFFind call fzf#run({
    \'sink': 'e',
    \'options': '-x -m',
    \})

function! s:buflist()
    redir => ls
    silent ls
    redir END
    return split(substitute(substitute(ls, '\s*wiersz \d\+\s*', '', 'g'), '"', '', 'g'), '\n')
endfunction

function! s:bufopen(e)
    execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

command! FZFBuffer call fzf#run({
    \   'source':  reverse(<sid>buflist()),
    \   'sink':    function('<sid>bufopen'),
    \   'options': '+m -x',
    \   'down' : '50%',
    \ })

" }}}
" FileBeagle: {{{
let g:filebeagle_suppress_keymaps = 1
" }}}
" BufferExplorer: {{{
let g:bufExplorerDefaultHelp=0
let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerReverseSort=0
let g:bufExplorerShowNoName=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=0
" }}}
" Goyo: {{{
let g:goyo_width = 120
" }}}
" GitGutter: {{{
let g:gitgutter_enabled = 0
" }}}
" PHPUnitQF: {{{
let g:phpunit_cmd = "./bin/phpunit"
let g:phpunit_args = "-c app"
" }}}
" KeyBindings: {{{
"hard mode :)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

let g:mapleader = "\<Space>"

map j gj
map k gk

command! WS :w !sudo tee %<CR>

command! Json :%!python -m json.tool

nnoremap <leader>s :FZF src/DAC/BriefcaseBundle<CR>

nmap <leader>ws <c-w>s
nmap <leader>wv <c-w>v
nmap <leader>wH <c-w>H
nmap <leader>wJ <c-w>J
nmap <leader>wK <c-w>K
nmap <leader>wL <c-w>L

nmap <silent> <c-d> :silent call CloseWindowOrKillBuffer()<CR>

":echo expand('%:t')<CR>
nmap <silent> <c-p> :bp<CR>
nmap <silent> <c-n> :bn<CR>

nnoremap <Leader>n :set nonumber!<CR>

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 10<C-e>
nnoremap <C-y> 10<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

nnoremap <leader>t :TagbarOpenAutoClose<CR>

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gvd :Gvdiff<CR>
nnoremap <silent> <leader>gd :Git! diff<CR>
nnoremap <silent> <leader>gds :Git! diff --staged<CR>
nnoremap <silent> <leader>gda :Git! diff HEAD<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>glc :silent Glog -n 10 --no-merges<CR>:copen<CR>
nnoremap <silent> <leader>glp :silent Glog -n 10 --no-merges -- %<CR>

nnoremap <leader>y :YcmDiags<CR>
" nnoremap <leader>e :Errors<CR>

nnoremap <Leader>f :FZFFind<CR>

" nnoremap <Esc>P P'[v']=
" nnoremap <Esc>p p'[v']=

nnoremap <C-\> :vsplit<CR>:let word=expand("<cword>")<CR>:exec "tag" word<CR>

nnoremap <leader>l :FZFMru<CR>
nnoremap gb :FZFBuffer<CR>
nnoremap <leader>m :FZFMruCwd<CR>
nnoremap <leader>gc :FZFGitCheckoutBranch<CR>

map Q @q

" highlight last inserted text
nnoremap gV `[v`]

nnoremap > ]m
nnoremap < [m

map <silent> _ <Plug>FileBeagleOpenCurrentWorkingDir
map <silent> - <Plug>FileBeagleOpenCurrentBufferDir
nmap <silent> H <Plug>FileBeagleOpenCurrentBufferDir

nmap <leader>c :FZFTagClass<CR>
nnoremap <Leader>b :FZFBuffer<CR>

nnoremap <leader>sld :DBExecSQL SELECT datname as "List of databases" FROM pg_database WHERE not datistemplate ORDER BY datname<CR>

nnoremap <leader>j :BufExplorer<CR>
nnoremap <silent><ESC> :silent BufExplorer<CR>
nnoremap <leader>go :Goyo<CR>

nnoremap <silent>L :silent b#<CR>
" nnoremap <silent>L :silent LustyBufferExplorer<CR>

" nmap f <Plug>Sneak_s
" nmap F <Plug>Sneak_S
" xmap f <Plug>Sneak_s
" xmap F <Plug>Sneak_S
" omap f <Plug>Sneak_s
" omap F <Plug>Sneak_S

"replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" nnoremap s :BufExplorer<CR>
nnoremap <silent><c-s> :silent w<CR>:call TmuxRepeat()<CR>

tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
tnoremap <ESC> <C-\><C-n>

" nnoremap <C-]> <Esc>:exe "ptjump " . expand("<cword>")<Esc>
" }}}
" Status Line: {{{
    " " Status Function: {{{2
    " function! Status(winnum)
    "   let active = a:winnum == winnr()
    "   let bufnum = winbufnr(a:winnum)
    "
    "   if &number
    "     let prefix = '    '
    "   else
    "     let prefix = ''
    "   endif
    "   let stat = prefix
    "
    "   " this handles alternative statuslines
    "   let usealt = 0
    "   let altstat = prefix
    "   let altstat .= ' Â»'
    "
    "   let type = getbufvar(bufnum, '&buftype')
    "
    "   let name = bufname(bufnum)
    "
    "   if type ==# 'help'
    "     let altstat .= ' ' . fnamemodify(name, ':t:r')
    "     let usealt = 1
    "   elseif name ==# '__Gundo__'
    "     let altstat .= ' Gundo'
    "     let usealt = 1
    "   elseif name ==# '__Gundo_Preview__'
    "     let altstat .= ' Gundo Preview'
    "     let usealt = 1
    "   endif
    "
    "   if usealt
    "     let altstat .= ' Â«'
    "     return altstat
    "   endif
    "
    "   " file name
    "   let stat .= active ? '%1* Â»%*' : ' Â«'
    "   let stat .= active ? ' %<%f ' : ' %<%f '
    "   let stat .= active ? '%1*Â«%*' : 'Â»'
    "
    "   " file modified
    "   " lorj
    "   let modified = getbufvar(bufnum, '&modified')
    "   let stat .= modified ? ' %2*+%*' : ''
    "
    "   " read only
    "   let readonly = getbufvar(bufnum, '&readonly')
    "   let stat .= readonly ? ' %2*â€¼%*' : ''
    "
    "   return stat
    " endfunction
    " " }}}
    " " Status AutoCMD: {{{
    "
    " function! s:RefreshStatus()
    "   for nr in range(1, winnr('$'))
    "     call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
    "   endfor
    " endfunction
    "
    " augroup status
    "   autocmd!
    "   autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
    " augroup END
    " " }}}
    " " Status Colors: {{{
    " hi! User1 ctermfg=10 ctermbg=0
    " hi! User2 ctermfg=9 ctermbg=0
    " " }}}
" }}}
" AutoCMD-fileSpecific: {{{
augroup filespecific
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd FileType sql,php,vim,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e
    autocmd FileType javascript setlocal omnifunc=syntaxcomplete#Complete
augroup END
" }}}
" Other: {{{
command! -nargs=1 Silent
    \ | execute ':silent !'.<q-args>
    \ | execute ':redraw!'

function! GetGitRootDir()
    let filePath = expand('%:p:h')
    let shellcmd = 'cd ' . filePath . ';'
        \ . 'basename $(readlink -f $(git rev-parse --show-cdup))'
        \ . '| sed "s/[ \r\n]//g"'

    return system(shellcmd)
endfunction

nnoremap gp gg/\(extends\\|implements\) /e<CR>l<C-]>

function! OpenFileInLastWindow()
    if getline('.') =~ '^# \./'
        let line = split(getline('.'), ':')
        let filePath = substitute(line[0], "^# ", "", "")
        let lineNumber = line[1]

        silent! exe "noautocmd wincmd p | e +" . lineNumber . " " . filePath
    endif
endfunction

function! RunPHPUnitTest(filter)
    if a:filter
        normal! T yw
        let result = system("bin/phpunit -c app/ src")
    else
        let result = system("bin/phpunit -c app/ " . expand("%"))
    endif
    silent! exe "noautocmd botright pedit __PHPUnit_Result__"
    silent! exe "noautocmd wincmd P"
    normal! ggdG
    setlocal wrap
    setlocal nonumber
    setlocal buftype=nofile
    nnoremap <silent><buffer> <CR> :silent call OpenFileInLastWindow()<CR>

    syn match testName "\w\+::\w\+" contained
    hi! def link testName Special

    syn match test "\d\+) [^ ]\+" contains=testName
    hi! def link test String

    syn match testFail "There were \d\+ errors:"
    syn match testFail "FAILURES!"
    hi! def link testFail ErrorMsg

    syn match testComment "^#"
    hi! def link testComment Comment

    syn match testFileName "\w\+\ze\." contained
    hi! def link testFileName Title

    syn match testFile "\.\(\/\w\+\)\+\.\w\+" contains=testFileName
    hi! def link testFile None

    let output = substitute(result, getcwd(), ".", "g")
    let output = substitute(output, ", called in ./[^\n]*", "", "g")

    let lines = split(output, '\v\n')
    if lines[2] !~ 'PHP Fatal error'
        let lines = lines[6:]
    endif

    let commentedLines = map(copy(lines), '"# " . v:val')
    call append(0, commentedLines)

    normal! gg
    normal! 0
    " setlocal cursorline
    " setlocal scrolloff=0
    silent! exe "noautocmd wincmd p"
endfunction

function! ToggleTest()
    let isTest = bufname('%') =~ 'Test.php$'

    let filePath = expand('%:p')

    if isTest
        let filePath = substitute(filePath, "BriefcaseBundle/Tests", "BriefcaseBundle", "")
        let filePath = substitute(filePath, "Test.php$", ".php", "")
    else
        let filePath = substitute(filePath, "BriefcaseBundle", "BriefcaseBundle/Tests", "")
        let filePath = substitute(filePath, ".php$", "Test.php", "")
    endif

    execute 'edit' filePath
endfunction

nnoremap <leader>i :call RunPHPUnitTest(0)<cr>
nnoremap <leader>o :call RunPHPUnitTest(1)<cr>

nnoremap gf gF

nnoremap K :call ToggleTest()<CR>

function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " never bdelete a nerd tree
    " if matchstr(expand("%"), 'NERD') == 'NERD'
    "   wincmd c
    "   return
    " endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
endfunction "}}}
" }}}
"
" function! TmuxRepeat()
"     silent! exec "Tmux select-pane -l && tmux send q enter c enter up up up enter && tmux select-pane -l"
" endfunction
function! TmuxRepeat()
    :Tmux send -t test.1 q up enter
endfunction
" vi: fdm=marker
