set nocompatible

filetype off "required by plugin manager

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

Plug 'kien/ctrlp.vim'
Plug 'DavidEGx/ctrlp-smarttabs'

" Plug 'altercation/vim-colors-solarized'
" Plug 'dhruvasagar/vim-railscasts-theme'
Plug 'morhetz/gruvbox'

Plug 'tomtom/tcomment_vim'
Plug 'spf13/vim-autoclose', { 'on': [] }
Plug 'tpope/vim-surround', { 'on': [] }
" Plug 'kien/rainbow_parentheses.vim', { 'for': ['php', 'sql']}
Plug 'lilydjwg/colorizer'

Plug 'itchyny/lightline.vim'
Plug 'amiorin/vim-project'

Plug 'vim-scripts/dbext.vim', { 'for': ['php', 'sql']}
Plug 'scrooloose/syntastic', { 'for': ['php', 'javascript', 'python']}
Plug 'Valloric/YouCompleteMe', { 'on': [] }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'honza/vim-snippets', { 'on': [] }
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'

Plug 'helino/vim-json', { 'for': ['json']}
Plug 'evidens/vim-twig', { 'for': ['twig']}

Plug 'jelera/vim-javascript-syntax', { 'for': ['javascript']}
Plug 'pangloss/vim-javascript', { 'for': ['javascript']}
call plug#end()

filetype plugin indent on

"lazy loading
augroup load_us_ycm
    autocmd!
    autocmd InsertEnter *
        \ call plug#load('ultisnips', 'vim-snippets', 'YouCompleteMe')
        \| call plug#load('vim-autoclose', 'vim-surround')
        \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END

"vim-autoclose
let g:autoclose_vim_commentmode = 1

"main
set encoding=utf-8
set undolevels=1000

set showmatch
set showmode
set showcmd

let g:mapleader = "\<Space>"
inoremap jk <Esc>
inoremap kj <Esc>
nmap <leader>ev :edit $MYVIMRC<CR>
nmap <leader>ws :w !sudo tee %<CR>

set number
set ttyfast

map j gj
map k gk

set splitbelow
set splitright

nmap <leader>h :noh<CR>

"command line mode
set wildmenu
set wildmode=longest:list,full
set wildignorecase
set wildignore+=*/.git/*,*/tmp/*,*/cache/*

"colors
syntax enable
colorscheme gruvbox
set background=dark
set t_Co=256

"indent
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4
set et

"gVim options
set guioptions-=T
set guioptions-=r
set guioptions-=L
set guioptions-=m
set guioptions-=e
set showtabline=0
set guifont=Liberation\ Mono\ for\ Powerline\ 11
set mousehide

"searching
set ignorecase
set smartcase
set incsearch
set magic

"Don't redraw while executing macros(performace)
set lazyredraw

"no anoying sound on errors
set noerrorbells
set novisualbell

"turn off backup
set nobackup
set noswapfile
set nowb

set lbr
set tw=500
set nowrap

" vim-airline
let g:airline_theme='badwolf'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#ctrlp#color_template = 'normal'
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
set laststatus=2
let g:airline_detect_modified = 1
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'c'  : 'C',
  \ 'v'  : 'V',
  \ 'V'  : 'V',
  \ '' : 'V',
  \ 's'  : 'S',
  \ 'S'  : 'S',
  \ '' : 'S',
  \ }
let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'c' ],
  \ [ 'x', 'y', 'warning' ]
  \ ]

"nerdtree
nnoremap <leader>n :NERDTreeTabsToggle<CR>
nnoremap <leader>r :NERDTreeFind<CR>
let g:NERDTreeShowHidden=1
let g:NERDTreeChDirMode = 2
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:NERDTreeWinSize = 40

"smart way to move between windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s

" Resize splitted views faster
" nnoremap <C-h> 3<C-w><
" nnoremap <C-l> 3<C-w>>
" nnoremap <C-k> 3<C-w>+
" nnoremap <C-j> 3<C-w>-

"speed up scrolling
set scrolljump=8

" Instead of 1 line, move 5 at a time
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" wrapping lines in visual mode
vnoremap < <gv
vnoremap > >gv

" DBGPavim
let g:dbgPavimPort = 9000
let g:dbgPavimBreakAtEntry = 0

" tagbar
nnoremap <leader>l :TagbarToggle<CR>
nnoremap <leader>t :TagbarOpenAutoClose<CR>
let g:tagbar_width = 45

" use system clipboard instead of default vim
set clipboard=unnamedplus

" easymotion
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" YCM
set completeopt=menuone,longest

"ultiSnips
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "ultisnips-snippets"]
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsExpandTrigger="<S-CR>"

"fugitive
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gvdiff<CR>

"project
let g:project_use_nerdtree = 1
set rtp+=~/.vim/bundle/vim-project/
call project#rc("~/projects")

"unite
nnoremap <Leader>u :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/git<CR>
nnoremap <Leader>f :<C-u>Unite -no-split -buffer-name=files -start-insert file<CR>
nnoremap <Leader>g :<C-u>Unite -no-split grep:.<CR>
if executable('ag')
    let g:unite_source_grep_command='ag'
    let g:unite_source_grep_default_opts='--nocolor --nogroup -S -C4'
    let g:unite_source_grep_recursive_opt=''
endif

"ctrlP
let g:ctrlp_working_path_mode = 'rw'
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <C-T> :CtrlPSmartTabs<CR>

if executable('ag')
    let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
elseif executable('ack-grep')
    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
elseif executable('ack')
    let s:ctrlp_fallback = 'ack %s --nocolor -f'
else
    let s:ctrlp_fallback = 'find %s -type f'
endif

let g:ctrlp_extensions = ['filetype']

"syntastic
let g:syntastic_php_checkers = ['php']
let g:syntastic_check_on_open=0

"local config
if filereadable(expand('~/dotfiles/vim/vimrc.local'))
    source ~/dotfiles/vim/vimrc.local
endif

"markdown syntax fix
au BufRead,BufNewFile *.md set filetype=markdown

" fast save
inoremap <C-s> <esc>:w<cr>a
nnoremap <C-s> :w<cr>

" fast windows close
inoremap <C-q> <esc>:q<cr>
nnoremap <C-q> :q<cr>

" php
let g:php_sql_query=1

function! ClearSQLSchema()
    execute 'g/^--\|^GRANT\|^REVOKE\|OWNER\|PRIVILEGES FOR ROLE\|^$/d'
    execute 'g/CREATE /\n\0/'
endfunction

"trailing whitespace
autocmd FileType sql,php,vim autocmd BufWritePre <buffer> :%s/\s\+$//e

"indent gudmes
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_start_level = 2
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg = #313131
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg = #3b3b3b

"rainbow parentheses
au VimEnter sql,php,vim RainbowParenthesesToggle
au Syntax sql,php,vim RainbowParenthesesLoadRound
au Syntax sql,php,vim RainbowParenthesesLoadSquare
au Syntax sql,php,vim RainbowParenthesesLoadBraces

"better selection
nnoremap gG ggVG

"select php heredoc
vnoremap ih <ESC>?<<<<CR>jV/SQL;<CR>k

"disable blinking cursor
set guicursor=a:blinkon0
